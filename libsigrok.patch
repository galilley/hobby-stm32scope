diff --git a/Makefile.am b/Makefile.am
index 66d5f506..0d7049c0 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -554,6 +554,12 @@ src_libdrivers_la_SOURCES += \
 	src/hardware/siglent-sds/protocol.c \
 	src/hardware/siglent-sds/api.c
 endif
+if HW_STM32SCOPE
+src_libdrivers_la_SOURCES += \
+	src/hardware/stm32scope/protocol.h \
+	src/hardware/stm32scope/protocol.c \
+	src/hardware/stm32scope/api.c
+endif
 if HW_SYSCLK_LWLA
 src_libdrivers_la_SOURCES += \
 	src/hardware/sysclk-lwla/lwla.h \
diff --git a/configure.ac b/configure.ac
index 3ab83af9..a0294589 100644
--- a/configure.ac
+++ b/configure.ac
@@ -305,6 +305,7 @@ SR_DRIVER([SCPI PPS], [scpi-pps])
 SR_DRIVER([serial DMM], [serial-dmm], [serial_comm])
 SR_DRIVER([serial LCR], [serial-lcr], [serial_comm])
 SR_DRIVER([Siglent SDS], [siglent-sds])
+SR_DRIVER([stm32scope], [stm32scope])
 SR_DRIVER([Sysclk LWLA], [sysclk-lwla], [libusb])
 SR_DRIVER([Sysclk SLA5032], [sysclk-sla5032], [libusb])
 SR_DRIVER([Teleinfo], [teleinfo], [serial_comm])
diff --git a/src/hardware/stm32scope/api.c b/src/hardware/stm32scope/api.c
new file mode 100644
index 00000000..cdb744ad
--- /dev/null
+++ b/src/hardware/stm32scope/api.c
@@ -0,0 +1,243 @@
+/*
+ * This file is part of the libsigrok project.
+ *
+ * Copyright (C) 2019 Simon Schmidt <schmidt.simon@gmail.com>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <config.h>
+#include "protocol.h"
+
+static struct sr_dev_driver stm32scope_driver_info;
+
+static const uint32_t scanopts[] = {
+	SR_CONF_CONN,
+	SR_CONF_SERIALCOMM,
+};
+
+static const uint32_t drvopts[] = {
+	SR_CONF_OSCILLOSCOPE,
+};
+
+static const uint32_t devopts[] = {
+	SR_CONF_CONTINUOUS,
+	SR_CONF_LIMIT_SAMPLES | SR_CONF_GET | SR_CONF_SET,
+	SR_CONF_SAMPLERATE | SR_CONF_GET,
+};
+
+static GSList *scan(struct sr_dev_driver *di, GSList *options)
+{
+	struct dev_context *devc;
+	struct sr_serial_dev_inst *serial;
+	struct sr_dev_inst *sdi;
+	struct sr_config *src;
+	GSList *devices, *l;
+	const char *conn, *serialcomm;
+	long samplerate;
+
+	devices = NULL;
+	conn = serialcomm = NULL;
+	for (l = options; l; l = l->next)
+	{
+		src = l->data;
+		switch (src->key)
+		{
+		case SR_CONF_CONN:
+			conn = g_variant_get_string(src->data, NULL);
+			break;
+		case SR_CONF_SERIALCOMM:
+			serialcomm = g_variant_get_string(src->data, NULL);
+			break;
+		}
+	}
+	if (!conn)
+	{
+		sr_err("stm32scope no SR_CONF_CONN provided, using default");
+		conn = STM32SCOPE_DEFAULT_CONN;
+	}
+	if (!serialcomm)
+		serialcomm = STM32SCOPE_DEFAULT_SERIALCOMM;
+
+	serial = sr_serial_dev_inst_new(conn, serialcomm);
+
+	if (serial_open(serial, SERIAL_RDWR) != SR_OK)
+		return NULL;
+
+	if (stm32scope_getsamplerate(serial, &samplerate) != SR_OK)
+		goto scan_cleanup;
+
+	sdi = g_malloc0(sizeof(struct sr_dev_inst));
+	sdi->status = SR_ST_INACTIVE;
+	sdi->vendor = g_strdup("STM32Scope");
+	sdi->model = g_strdup("v1.0");
+	devc = g_malloc0(sizeof(struct dev_context));
+	devc->state = STM32SCOPE_STOPPED;
+	devc->samplerate = (uint64_t)samplerate;
+	sdi->inst_type = SR_INST_SERIAL;
+	sdi->conn = serial;
+	sdi->priv = devc;
+
+	sr_channel_new(sdi, 0, SR_CHANNEL_ANALOG, TRUE, "A0");
+	sr_channel_new(sdi, 0, SR_CHANNEL_ANALOG, TRUE, "A1");
+
+	devices = g_slist_append(devices, sdi);
+
+scan_cleanup:
+	serial_close(serial);
+
+	return std_scan_complete(di, devices);
+}
+
+static int config_get(uint32_t key, GVariant **data,
+					  const struct sr_dev_inst *sdi, const struct sr_channel_group *cg)
+{
+	struct dev_context *devc = sdi->priv;
+
+	(void)cg;
+
+	switch (key)
+	{
+	case SR_CONF_LIMIT_SAMPLES:
+		return sr_sw_limits_config_get(&devc->limits, key, data);
+	case SR_CONF_SAMPLERATE:
+		*data = g_variant_new_uint64(devc->samplerate);
+		break;
+	default:
+		return SR_ERR_NA;
+	}
+
+	return SR_OK;
+}
+
+static int config_set(uint32_t key, GVariant *data,
+					  const struct sr_dev_inst *sdi, const struct sr_channel_group *cg)
+{
+	struct dev_context *devc;
+
+	(void)cg;
+
+	devc = sdi->priv;
+
+	switch (key)
+	{
+	case SR_CONF_LIMIT_SAMPLES:
+		return sr_sw_limits_config_set(&devc->limits, key, data);
+	default:
+		return SR_ERR_NA;
+	}
+
+	return SR_OK;
+}
+
+static int config_list(uint32_t key, GVariant **data,
+					   const struct sr_dev_inst *sdi, const struct sr_channel_group *cg)
+{
+	switch (key)
+	{
+	case SR_CONF_SCAN_OPTIONS:
+	case SR_CONF_DEVICE_OPTIONS:
+		return STD_CONFIG_LIST(key, data, sdi, cg, scanopts, drvopts, devopts);
+	// case SR_CONF_DATA_SOURCE:
+	// 	*data = g_variant_new_strv(ARRAY_AND_SIZE(data_sources));
+	// 	break;
+	default:
+		return SR_ERR_NA;
+	}
+
+	return SR_OK;
+}
+
+static int dev_acquisition_start(const struct sr_dev_inst *sdi)
+{
+	struct sr_serial_dev_inst *serial;
+	struct dev_context *devc;
+
+	serial = sdi->conn;
+	devc = sdi->priv;
+
+	sr_sw_limits_acquisition_start(&devc->limits);
+
+	std_session_send_df_header(sdi);
+
+	serial_source_add(
+		sdi->session,
+		serial,
+		G_IO_IN,
+		50,
+		stm32scope_receive_data,
+		(void *)sdi);
+
+	if (stm32scope_start(sdi) != SR_OK)
+	{
+		return SR_ERR;
+	}
+	return SR_OK;
+}
+
+static int dev_acquisition_stop(struct sr_dev_inst *sdi)
+{
+	struct sr_serial_dev_inst *serial;
+	const char *prefix;
+	int ret;
+
+	if (!sdi)
+	{
+		sr_err("%s: Invalid argument.", __func__);
+		return SR_ERR_ARG;
+	}
+
+	serial = sdi->conn;
+	prefix = sdi->driver->name;
+
+	if ((ret = serial_source_remove(sdi->session, serial)) < 0)
+	{
+		sr_err("%s: Failed to remove source: %d.", prefix, ret);
+		return ret;
+	}
+
+	if (stm32scope_stop(sdi) != SR_OK)
+	{
+		return SR_ERR;
+	};
+
+	// For some reason this causes error on second capture
+	// TODO figure out why, and why it's the default
+	// if ((ret = sr_dev_close(sdi)) < 0) {
+	// 	sr_err("%s: Failed to close device: %d.", prefix, ret);
+	// 	return ret;
+	// }
+
+	return std_session_send_df_end(sdi);
+}
+
+static struct sr_dev_driver stm32scope_driver_info = {
+	.name = "stm32scope",
+	.longname = "stm32scope",
+	.api_version = 1,
+	.init = std_init,
+	.cleanup = std_cleanup,
+	.scan = scan,
+	.dev_list = std_dev_list,
+	.dev_clear = std_dev_clear,
+	.config_get = config_get,
+	.config_set = config_set,
+	.config_list = config_list,
+	.dev_open = std_serial_dev_open,
+	.dev_close = std_serial_dev_close,
+	.dev_acquisition_start = dev_acquisition_start,
+	.dev_acquisition_stop = dev_acquisition_stop,
+	.context = NULL,
+};
+SR_REGISTER_DEV_DRIVER(stm32scope_driver_info);
diff --git a/src/hardware/stm32scope/protocol.c b/src/hardware/stm32scope/protocol.c
new file mode 100644
index 00000000..9ddf85f7
--- /dev/null
+++ b/src/hardware/stm32scope/protocol.c
@@ -0,0 +1,228 @@
+/*
+ * This file is part of the libsigrok project.
+ *
+ * Copyright (C) 2019 Simon Schmidt <schmidt.simon@gmail.com>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <config.h>
+#include "protocol.h"
+#include "libsigrok-internal.h"
+
+// TODO in device conf
+const guint8 NUM_CHANNELS = 2;
+const float VOLTAGE_REFERENCE = 3.3;
+
+const uint8_t N_CHANNELS = 2;
+
+static void stm32scope_live_data(struct sr_dev_inst *sdi, const uint8_t *buf)
+{
+	struct dev_context *devc;
+	struct sr_datafeed_packet packet;
+	struct sr_datafeed_analog analog;
+	struct sr_analog_encoding encoding;
+	struct sr_analog_meaning meaning;
+	struct sr_analog_spec spec;
+	struct sr_channel *ch;
+	uint16_t raw_value;
+	float value;
+	int i, digits;
+
+	// TODO? yes no?
+	digits = 4;
+	devc = sdi->priv;
+
+	// TODO
+	// if (devc->data_source != DATA_SOURCE_LIVE)
+	// 	return;
+
+	for (i = 0; i < NUM_CHANNELS; i++)
+	{
+		ch = g_slist_nth_data(sdi->channels, i);
+		if (!ch->enabled)
+			continue;
+
+		raw_value = buf[2 * i + 1] << 8 | buf[2 * i];
+		value = VOLTAGE_REFERENCE * (0.0 + raw_value) / ((1 << 12) + 0.0);
+
+		sr_analog_init(&analog, &encoding, &meaning, &spec, digits);
+		analog.num_samples = 1;
+		analog.data = &value;
+		analog.meaning->mq = SR_MQ_VOLTAGE;
+		analog.meaning->unit = SR_UNIT_VOLT;
+		// TODO correct flags?
+		analog.meaning->mqflags = SR_MQFLAG_DC;
+		analog.meaning->channels = g_slist_append(NULL, ch);
+
+		packet.type = SR_DF_ANALOG;
+		packet.payload = &analog;
+		sr_session_send(sdi, &packet);
+		g_slist_free(analog.meaning->channels);
+	}
+
+	sr_sw_limits_update_samples_read(&devc->limits, 1);
+}
+
+static const uint8_t *stm32scope_parse_data(struct sr_dev_inst *sdi,
+											const uint8_t *buf, int len)
+{
+	if (len < 2 * NUM_CHANNELS)
+		/* 2 bytes per channel, need more data. */
+		return NULL;
+
+	stm32scope_live_data(sdi, buf);
+	return buf + 2 * NUM_CHANNELS;
+}
+
+static int stm32scope_send_command(struct sr_serial_dev_inst *serial, int cmd)
+{
+	sr_info("stm32scope: Sending cmd=%d", cmd);
+	if (serial_write_blocking(serial, &cmd, 1, 10) < 0)
+	{
+		sr_err("Unable to send command, serial error");
+		return SR_ERR;
+	}
+	return SR_OK;
+}
+
+SR_PRIV int stm32scope_start(const struct sr_dev_inst *sdi)
+{
+	struct sr_serial_dev_inst *serial;
+	struct dev_context *devc;
+	int ret;
+	devc = sdi->priv;
+	serial = sdi->conn;
+
+	sr_info("stm32scope: Starting");
+	ret = stm32scope_send_command(serial, STM32SCOPE_CMD_START) != SR_OK;
+	if (ret != 0)
+	{
+		return ret;
+	};
+
+	devc->state = STM32SCOPE_RUNNING;
+	return SR_OK;
+}
+
+SR_PRIV int stm32scope_stop(const struct sr_dev_inst *sdi)
+{
+	struct sr_serial_dev_inst *serial;
+	struct dev_context *devc;
+	int ret;
+
+	devc = sdi->priv;
+	serial = sdi->conn;
+
+	sr_info("stm32scope: Stopping");
+	ret = stm32scope_send_command(serial, STM32SCOPE_CMD_STOP) != SR_OK;
+	if (ret != SR_OK)
+	{
+		return ret;
+	};
+	devc->state = STM32SCOPE_STOPPED;
+	return SR_OK;
+}
+
+SR_PRIV int stm32scope_getsamplerate(
+	struct sr_serial_dev_inst *serial,
+	long *samplerate)
+{
+	char *buf;
+	int len;
+	int ret;
+
+	sr_info("stm32scope: get sample rate");
+
+	ret = stm32scope_send_command(serial, STM32SCOPE_CMD_GETSAMPLERATE) != SR_OK;
+	if (ret != SR_OK)
+	{
+		return ret;
+	};
+
+	// Read the value back
+	len = 10;
+	buf = g_malloc0(len);
+	ret = serial_readline(serial, &buf, &len, 10);
+	if (ret < 0)
+	{
+		sr_err("Serial error on getsample response");
+		return ret;
+	}
+	sr_info("serial ret=%d", ret);
+	ret = sr_atol(buf, samplerate);
+	if (ret != SR_OK)
+	{
+		sr_err("Error parsing return value for getsamplerate");
+		return ret;
+	}
+	sr_info("stm32scope: Got samplerate %d", *samplerate);
+	return SR_OK;
+}
+
+SR_PRIV int stm32scope_receive_data(int fd, int revents, void *cb_data)
+{
+	struct sr_dev_inst *sdi;
+	struct dev_context *devc;
+	struct sr_serial_dev_inst *serial;
+	const uint8_t *ptr, *next_ptr, *end_ptr;
+	int len;
+
+	(void)fd;
+
+	if (!(sdi = cb_data) || !(devc = sdi->priv) || revents != G_IO_IN)
+		return TRUE;
+
+	if (devc->state != STM32SCOPE_RUNNING)
+	{
+		sr_err("stm32scope not running");
+	}
+
+	serial = sdi->conn;
+
+	/* Try to get as much data as the buffer can hold. */
+	len = sizeof(devc->buf) - devc->buf_len;
+	len = serial_read_nonblocking(serial, devc->buf + devc->buf_len, len);
+	if (len < 1)
+	{
+		sr_err("Serial port read error: %d.", len);
+		return FALSE;
+	}
+	devc->buf_len += len;
+
+	/* Now look for packets in that data. */
+	ptr = devc->buf;
+	end_ptr = ptr + devc->buf_len;
+	while ((next_ptr = stm32scope_parse_data(sdi, ptr, end_ptr - ptr)))
+		ptr = next_ptr;
+
+	/* If we have any data left, move it to the beginning of our buffer. */
+	memmove(devc->buf, ptr, end_ptr - ptr);
+	devc->buf_len -= ptr - devc->buf;
+
+	/* If buffer is full and no valid packet was found, wipe buffer. */
+	if (devc->buf_len >= sizeof(devc->buf))
+	{
+		devc->buf_len = 0;
+		return FALSE;
+	}
+
+	if (sr_sw_limits_check(&devc->limits))
+	{
+		sr_dev_acquisition_stop(sdi);
+		return TRUE;
+	}
+
+	return TRUE;
+}
diff --git a/src/hardware/stm32scope/protocol.h b/src/hardware/stm32scope/protocol.h
new file mode 100644
index 00000000..6f2c38e2
--- /dev/null
+++ b/src/hardware/stm32scope/protocol.h
@@ -0,0 +1,63 @@
+/*
+ * This file is part of the libsigrok project.
+ *
+ * Copyright (C) 2019 Simon Schmidt <schmidt.simon@gmail.com>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef LIBSIGROK_HARDWARE_STM32SCOPE_PROTOCOL_H
+#define LIBSIGROK_HARDWARE_STM32SCOPE_PROTOCOL_H
+
+#include <stdint.h>
+#include <glib.h>
+#include <libsigrok/libsigrok.h>
+#include "libsigrok-internal.h"
+
+#define LOG_PREFIX "stm32scope"
+#define STM32SCOPE_BUF_SIZE (1024)
+
+#define STM32SCOPE_DEFAULT_SERIALCOMM "1000000/8n1";
+#define STM32SCOPE_DEFAULT_CONN "/dev/ttyUSB0";
+#define STM32SCOPE_BAUD_RATE 1000000;
+
+enum stm32scope_state
+{
+    STM32SCOPE_STOPPED,
+    STM32SCOPE_RUNNING,
+};
+
+enum stm32scope_command
+{
+    STM32SCOPE_CMD_STOP = 1,
+    STM32SCOPE_CMD_START = 2,
+    STM32SCOPE_CMD_GETSAMPLERATE = 3,
+};
+
+struct dev_context
+{
+    struct sr_sw_limits limits;
+    enum stm32scope_state state;
+    uint64_t samplerate;
+    uint8_t buf[STM32SCOPE_BUF_SIZE];
+    unsigned int buf_len;
+};
+
+SR_PRIV int stm32scope_start(const struct sr_dev_inst *sdi);
+SR_PRIV int stm32scope_stop(const struct sr_dev_inst *sdi);
+SR_PRIV int stm32scope_receive_data(int fd, int revents, void *cb_data);
+SR_PRIV int stm32scope_getsamplerate(
+    struct sr_serial_dev_inst *serial,
+    long *samplerate);
+#endif
